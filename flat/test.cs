// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::FlatBuffers;

public struct test : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static test GetRootAstest(ByteBuffer _bb) { return GetRootAstest(_bb, new test()); }
  public static test GetRootAstest(ByteBuffer _bb, test obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public test __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Class CType { get { int o = __p.__offset(4); return o != 0 ? (Class)__p.bb.GetInt(o + __p.bb_pos) : Class.Base; } }
  public long Num { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<test> Createtest(FlatBufferBuilder builder,
      Class cType = Class.Base,
      long num = 0) {
    builder.StartObject(2);
    test.AddNum(builder, num);
    test.AddCType(builder, cType);
    return test.Endtest(builder);
  }

  public static void Starttest(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddCType(FlatBufferBuilder builder, Class cType) { builder.AddInt(0, (int)cType, 0); }
  public static void AddNum(FlatBufferBuilder builder, long num) { builder.AddLong(1, num, 0); }
  public static Offset<test> Endtest(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<test>(o);
  }
};

