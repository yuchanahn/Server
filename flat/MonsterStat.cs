// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::FlatBuffers;

public struct MonsterStat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MonsterStat GetRootAsMonsterStat(ByteBuffer _bb) { return GetRootAsMonsterStat(_bb, new MonsterStat()); }
  public static MonsterStat GetRootAsMonsterStat(ByteBuffer _bb, MonsterStat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MonsterStat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Class CType { get { int o = __p.__offset(4); return o != 0 ? (Class)__p.bb.GetInt(o + __p.bb_pos) : Class.Base; } }
  public int HP { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<MonsterStat> CreateMonsterStat(FlatBufferBuilder builder,
      Class cType = Class.Base,
      int HP = 0,
      int ID = 0) {
    builder.StartObject(3);
    MonsterStat.AddID(builder, ID);
    MonsterStat.AddHP(builder, HP);
    MonsterStat.AddCType(builder, cType);
    return MonsterStat.EndMonsterStat(builder);
  }

  public static void StartMonsterStat(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddCType(FlatBufferBuilder builder, Class cType) { builder.AddInt(0, (int)cType, 0); }
  public static void AddHP(FlatBufferBuilder builder, int HP) { builder.AddInt(1, HP, 0); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(2, ID, 0); }
  public static Offset<MonsterStat> EndMonsterStat(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MonsterStat>(o);
  }
};

