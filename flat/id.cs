// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::FlatBuffers;

public struct id : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static id GetRootAsid(ByteBuffer _bb) { return GetRootAsid(_bb, new id()); }
  public static id GetRootAsid(ByteBuffer _bb, id obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public id __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Class CType { get { int o = __p.__offset(4); return o != 0 ? (Class)__p.bb.GetInt(o + __p.bb_pos) : Class.Base; } }
  public int ID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<id> Createid(FlatBufferBuilder builder,
      Class cType = Class.Base,
      int ID = 0) {
    builder.StartObject(2);
    id.AddID(builder, ID);
    id.AddCType(builder, cType);
    return id.Endid(builder);
  }

  public static void Startid(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddCType(FlatBufferBuilder builder, Class cType) { builder.AddInt(0, (int)cType, 0); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(1, ID, 0); }
  public static Offset<id> Endid(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<id>(o);
  }
};

